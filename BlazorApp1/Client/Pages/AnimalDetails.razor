@page "/animaldetails"
@using BlazorApp1.Shared.Model
@inject HttpClient Http
<h1>Animal Data</h1>
<p>Blazor CRUD operation</p>
<div class="row">
    <div class="col-md-6">
        <a href='/animal/add' class="btn btn-primary" role="button">
            <i class="fas fa-animal-plus"></i>
            Add Animal
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search Animal by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterAnimal" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (animalList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Breed</th>
                <th>BirthDate</th>
                <th>Price</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var animal in animalList)
            {
                <tr>
                    <td>@animal.animalId</td>
                    <td>@animal.name</td>
                    <td>@animal.breed</td>
                    <td>@animal.birthDate</td>
                    <td>@animal.price</td>
                    <td>@animal.status</td>
                    <td>
                        <a href='/animal/edit/@animal.animalId' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/animal/delete/@animal.animalId' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}
@code {
    protected List<Animal> animalList = new();
    protected List<Animal> searchAnimalData = new();
    protected Animal animal = new();
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetAnimal();
    }
    protected async Task GetAnimal()
    {
        animalList = await Http.GetFromJsonAsync<List<Animal>>("api/Animal");
        searchAnimalData = animalList;
    }
    protected void FilterAnimal()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            animalList = searchAnimalData
                .Where(x => x.name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            animalList = searchAnimalData;
        }
    }
    protected void DeleteConfirm(int animalID)
    {
        animal = animalList.FirstOrDefault(x => x.animalId == animalID);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        animalList = searchAnimalData;
    }
}